apply plugin: 'war'
apply plugin: 'eclipse-wtp'

moduleName = 'dx-services'

//loads properties based on environment, default is local
def loadConfiguration() {
    println ""
    println "--- $moduleName ---"
    println "Loading configuration, to check property values run 'gradle -Penv=[local|dev|qa|prod] printProps'"
    def environment = hasProperty('env') ? env : 'local'
    setProperty 'environment', environment
    println "Environment is set to $environment"

    def configFile = file('config.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURL())
    setProperty 'config', config

    println "Moving property files from source to central config location"
    println "copying from env/" + environment
    println "copying to " + config.configLocation + "/" + config.artifactName
    copy {
        from 'env/' + environment
        into config.configLocation + "/" + config.artifactName
        include '**/*.properties'
    }

    println ""
}

// We define a new configuration with the name 'sshAntTask'.
// This configuration is used to define our dependencies.
configurations {
    loadConfiguration()
    sshAntTask
    pmdConf
}

repositories {
    mavenRepo urls: 'http://maven.springframework.org/release'
    mavenRepo urls: 'http://maven.springframework.org/milestone'
    mavenRepo urls: 'http://maven.springframework.org/snapshot'
    mavenCentral()
}


dependencies {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'groovy'

    providedCompile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
    providedCompile "javax.servlet.jsp:jsp-api:2.1"
    providedCompile "javax.el:el-api:1.0"
    sshAntTask 'org.apache.ant:ant-jsch:1.7.1', 'jsch:jsch:0.1.29'
    pmdConf 'pmd:pmd:4.2.5'
    compile "org.mongodb:mongo-java-driver:2.10.1"
    compile "org.slf4j:slf4j-api:1.5.10"
    compile "org.slf4j:jcl-over-slf4j:1.5.10"
    compile "org.slf4j:slf4j-log4j12:1.5.10"
    compile "log4j:log4j:1.2.16"
    compile "org.aspectj:aspectjrt:1.6.10"
    compile "org.aspectj:aspectjweaver:1.6.8"
    compile "javax.servlet:jstl:1.2"
    compile "taglibs:standard:1.1.2"
    compile "commons-codec:commons-codec:1.5"
    compile "commons-lang:commons-lang:2.6"
    compile "commons-io:commons-io:2.0.1"
    compile "commons-dbcp:commons-dbcp:1.4"
    compile "commons-collections:commons-collections:3.2.1"
    compile "commons-configuration:commons-configuration:1.6"
    compile "org.codehaus.jackson:jackson-core-asl:1.7.4"
    compile "org.codehaus.jackson:jackson-mapper-asl:1.7.4"
    compile "com.thoughtworks.xstream:xstream:1.4.1"
    compile "org.apache.velocity:velocity:1.6.4"
    compile "org.springframework:spring-webmvc:3.0.4.RELEASE"
    compile "org.springframework:spring-orm:3.0.4.RELEASE"
    compile "org.springframework:spring-oxm:3.0.4.RELEASE"
    compile "org.springframework.security:spring-security-cas:3.1.0.RELEASE"
    compile "org.springframework.security:spring-security-core:3.1.0.RELEASE"
    compile "org.springframework.security:spring-security-config:3.1.0.RELEASE"
    compile "org.springframework.security:spring-security-web:3.1.0.RELEASE"
    compile "org.springframework.security:spring-security-taglibs:3.1.0.RELEASE"
    compile "org.springframework:spring-aop:3.0.4.RELEASE"
    compile "org.hibernate:hibernate-core:3.3.2.GA"
    compile "org.hibernate:hibernate-annotations:3.3.1.GA"
    compile "org.hibernate:hibernate-commons-annotations:3.3.0.ga"
    compile "org.hibernate:hibernate-entitymanager:3.4.0.GA"
    compile "javax.inject:javax.inject:1"
    compile "org.json:json:20090211"
    compile "commons-fileupload:commons-fileupload:1.2.2"
}

configurations.runtime.exclude group: 'org.codehaus.groovy'

war.doFirst {
    println "--- dx-services BUILDING WAR FILE ---"
}

war {
    println "warName:  $config.artifactName" + ".war"
    println "warDestinationDir: $config.warDestinationDir"
    String warDestinationDir = "$config.warDestinationDir"
    String warName = "$config.artifactName" + ".war"

    if (warName == null || warName == '') {
        ant.fail(message: 'WAR name required.')
    }

    if (warDestinationDir == null || warDestinationDir == '') {
        ant.fail(message: 'WAR destination dir required.')
    }

    archiveName = warName
    destinationDir = file(warDestinationDir)
}

task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

task pmd << {
    println 'Running PMD static code analysis'
    ant {
        taskdef(name:'pmd', classname:'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmdConf.asPath)

        pmd(shortFilenames:'true', failonruleviolation:'true', rulesetfiles:'conf/pmd-rules.xml') {
            formatter(type:'text', toConsole:'true')
            fileset(dir: "src/main/java") {
                include(name: '**/*.java')
            }
            fileset(dir: "src/test/java") {
                include(name: '**/*.java')
            }
        }
    }
}

defaultTasks 'build'
