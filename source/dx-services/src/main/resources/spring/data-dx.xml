<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	 	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- Since this thread pool is only used by the Sullivans implementation of the RequestBufferDAO, and that's in a
         singleton design, we only need a pool with one thread. Use teh simple executor from Spring -->
    <bean id="taskExecutor"
          class="org.springframework.core.task.SimpleAsyncTaskExecutor"/>

    <!-- Scans within the base package of the application for @Components to configure as beans -->
    <context:component-scan base-package="com.dx.data" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>

    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <!--<bean id="transactionManager"-->
          <!--class="org.springframework.orm.jpa.JpaTransactionManager">-->
        <!--<property name="entityManagerFactory" ref="entityManagerFactory"/>-->
    <!--</bean>-->

    <!-- Perform declarative transaction management automatically on annotated classes -->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!--<bean id="entityManagerFactory"-->
          <!--class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">-->
        <!--<property name="persistenceUnitName" value="sullivans"/>-->
        <!--<property name="persistenceXmlLocation" value="classpath:spring/persistence.xml"/>-->
        <!--<property name="dataSource" ref="${sullivans.datasource.bean}"/>-->
        <!--<property name="jpaVendorAdapter">-->
            <!--<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">-->
                <!--<property name="database" value="${sullivans.emf.database}"/>-->
                <!--<property name="databasePlatform" value="${sullivans.emf.databasePlatform}"/>-->
                <!--<property name="showSql" value="${sullivans.emf.showSql}"/>-->
                <!--<property name="generateDdl" value="${sullivans.emf.generateDdl}"/>-->
            <!--</bean>-->
        <!--</property>-->
        <!--<property name="jpaPropertyMap">-->
            <!--<map>-->
                <!--<entry key="hibernate.hbm2ddl.auto" value="${sullivans.emf.hbm2ddl}"/>-->
                <!--<entry key="hibernate.format_sql" value="${sullivans.emf.formatSql}"/>-->
                <!--<entry key="hibernate.default_schema" value="${sullivans.emf.defaultSchema}"/>-->
            <!--</map>-->
        <!--</property>-->
    <!--</bean>-->


    <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"-->
          <!--p:driverClassName="${sullivans.datasource.class}"-->
          <!--p:url="${sullivans.datasource.url}"-->
          <!--p:username="${sullivans.datasource.username}"-->
          <!--p:password="${sullivans.datasource.password}"/>-->

    <!--<jee:jndi-lookup id="jndiDataSource" jndi-name="jdbc/sullivans"/>-->

</beans>